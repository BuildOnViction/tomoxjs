#!/usr/bin/env node

const commander = require('commander')
const TomoXJS = require('./index')
const pjson = require('./package.json')
const { prompt } = require('inquirer')
const fs = require('fs')
const path = require('path')
const os = require('os')

let configPath = path.resolve(process.cwd(), '.env')
if (fs.existsSync(path.resolve(require('os').homedir(), '.tomoxjs'))) {
    configPath = path.resolve(require('os').homedir(), '.tomoxjs')
}

require('dotenv').config({ path: configPath })

if (!process.env.DEX_URI || !process.env.TRADER_PKEY) {
    console.log('DEX_URI, TRADER_PKEY env are require, please create .env file')
    process.exit(1)
}

const tomox = new TomoXJS(
    process.env.DEX_URI,
    process.env.TRADER_PKEY)

commander
    .version(pjson.version)
    .description('TomoX Market CLI')

commander
    .command('setup')
    .action(async (params) => {
        const questions = [{
            type : 'password',
            name : 'traderPKey',
            message : 'Enter trader private key (0x)...'
        }, {
            type : 'input',
            name : 'dexUri',
            message : 'Enter DEX Uri (https://dex.tomochain.com)...'
        }]
        prompt(questions).then( answers => {
            let tomoxjsPath = path.resolve(require('os').homedir(), '.tomoxjs')
            fs.writeFile(tomoxjsPath, `DEX_URI=${answers.dexUri}\nTRADER_PKEY=${answers.traderPKey}\n`, function (err) {
                if (err) throw err;
                console.log('Saved!');
            });
        })
    })

commander
    .command('create')
    .option('-b, --baseToken <baseToken>', 'base token', '0xBD8b2Fb871F97b2d5F0A1af3bF73619b09174B2A')
    .option('-q, --quoteToken <quoteToken>', 'quote token', '0x0000000000000000000000000000000000000001')
    .option('-p, --price <price>', 'price', '21207')
    .option('-a, --amount <amount>', 'amount', '00469')
    .option('-s, --side <side>', 'side', 'BUY')
    .option('-t, --type <type>', 'type', 'LO')
    .option('-e, --exchangeAddress <exchangeAddress>', 'exchangeAddress')
    .action(async (params) => {
        await tomox.createOrder({
                baseToken: params.baseToken,
                quoteToken: params.quoteToken,
                exchangeAddress: params.exchangeAddress,
                price: params.price,
                side: params.side,
                type: params.type,
                amount: params.amount
        }).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

function collect(value, previous) {
      return previous.concat([value]);
}

commander
    .command('cancel')
    .requiredOption('-s, --hash <hash>', 'hash', collect, [])
    .option('-n, --nonce <nonce>', 'nonce', 0)
    .action(async (params) => {
        console.log(params.hash)
        if (params.hash.length === 1) {
            await tomox.cancelOrder(params.hash[0], params.nonce).then(data => {
                console.log(data)
            }).catch(e => console.log(e))
        }
        if (params.hash.length > 1) {
            await tomox.cancelManyOrders(params.hash).then(data => {
                console.log(data)
            }).catch(e => console.log(e))
        }
    })

commander
    .command('pairs')
    .action(async () => {
        await tomox.getPairs().then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('orders list')
    .option('-b, --baseToken <baseToken>', 'base token')
    .option('-q, --quoteToken <quoteToken>', 'quote token')
    .action(async (params) => {
        await tomox.getOrders(params).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('orderbook')
    .requiredOption('-b, --baseToken <baseToken>', 'base token')
    .requiredOption('-q, --quoteToken <quoteToken>', 'quote token')
    .action(async (params) => {
        await tomox.getOrderBook(params).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('ohlcv')
    .requiredOption('-b, --baseToken <baseToken>', 'base token')
    .requiredOption('-q, --quoteToken <quoteToken>', 'quote token')
    .requiredOption('-i, --timeInternal <timeInterval>', 'time interval, candle size. Valid values: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 1w, 1mo (1 month)')
    .action(async (params) => {
        await tomox.getOrderBook(params).then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander
    .command('info')
    .action(async () => {
        await tomox.getRelayerInfo().then(data => {
            console.log(data)
        }).catch(e => console.log(e))
    })

commander.parse(process.argv)
